"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
from datetime import timedelta

import environ  # noqa
from django.utils.translation import ugettext_lazy as _

from .logging import LOGGING  # noqa
from .swagger import SWAGGER_SETTINGS  # noqa

#
env = environ.Env()
env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = environ.Path(__file__) - 3

BASE_URL = env("BASE_URL", default="http://localhost")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="6n&fz#k_vf1bnmmb0h9u91gvr0+5mw9#$$b_a-@zcwr7vx)636",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS", default="*")

# Application definition

DJANGO_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
)

THIRD_PARTY_APPS = (
    "rest_framework",
    # Auth
    "rest_framework.authtoken",
    "rest_auth",
    # Registration
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "rest_auth.registration",
    # CORS
    "corsheaders",
    # Swagger
    "drf_yasg",
)

# Apps specific for this project go here.
LOCAL_APPS = (
    "apps.core.apps.CoreConfig",
    "apps.users.apps.UserConfig",
    "apps.users_auth.apps.UsersAuthConfig",
    "apps.book.apps.BookConfig",
)

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Registration
SITE_ID = 1
ACCOUNT_AUTHENTICATION_METHOD = "email"  # Change to "username" if login by username
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD_EMAIL = "email"
ACCOUNT_AUTHENTICATION_METHOD_USERNAME = "username"
ACCOUNT_EMAIL_VERIFICATION_MANDATORY = "mandatory"

# Mailer
# There are 3 option: mandatory, optional, none
ACCOUNT_EMAIL_VERIFICATION = env("ACCOUNT_EMAIL_VERIFICATION", default="none")

AUTHENTICATION_BACKENDS = (
    # Uncomment following if you want to access the admin
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

# Auth model
AUTH_USER_MODEL = "users.User"

# Route
ROOT_URLCONF = "config.urls"

# Template
TEMPLATES_ROOT = str(ROOT_DIR("templates"))
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_ROOT],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": env.db("DATABASE_URL", default=""),
}
DATABASES["default"]["ATOMIC_REQUESTS"] = True
USE_PGBOUNCER = env.bool("USE_PGBOUNCER", default=False)
if USE_PGBOUNCER:
    DATABASES["default"]["HOST"] = env.str("PGBOUNCER_HOST", default="localhost")
    DATABASES["default"]["PORT"] = env.int("PGBOUNCER_POST", default=6432)

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/
LANGUAGES = (("en-us", _("English")),)

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Locale paths
LOCALE_PATHS = (os.path.join(ROOT_DIR, "locale"),)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# STATIC FILE CONFIGURATION
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = env.str("STATIC_ROOT", default=str(ROOT_DIR("staticfiles")))

# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = env.str("STATIC_URL", default="/static/")

# Media
MEDIA_ROOT = env.str("MEDIA_ROOT", default=str(ROOT_DIR("media")))
MEDIA_URL = env.str("MEDIA_URL", default="/media/")

DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

REST_FRAMEWORK = {
    "COERCE_DECIMAL_TO_STRING": False,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "apps.users_auth.authentication.CustomJWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PAGINATION_CLASS": "apps.core.pagination.StandardResultsSetPagination",  # LimitOffsetPagination
    "PAGE_SIZE": env.int("PAGE_SIZE", 20),
    "PAGINATE_BY_PARAM": "page_size",  # Allow client to override, using `?page_size=xxx`.
    "MAX_PAGINATE_BY": 500,  # Maximum limit allowed when using `?page_size=xxx`.
    # 'DATE_INPUT_FORMATS': ['YYYY-MM-DD HH:MM:SS'],
    "EXCEPTION_HANDLER": "apps.core.exception_handler.api_exception_handler",
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '20/minute',
        'user': '20/minute'
    }
}

REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "apps.users.api.serializers.UserRegisterSerializer"
}

REST_AUTH_SERIALIZERS = {
    "LOGIN_SERIALIZER": "apps.users.api.serializers.UserLoginSerializer",
    "TOKEN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
}

REST_AUTH_TOKEN_CREATOR = "apps.core.utils.default_create_token"

# Allow CORS requests from all domain
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False

CORS_ALLOW_HEADERS = (
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "device-id",
    "client-id",
    "app-version",
)

ACCOUNT_ADAPTER = "apps.users_auth.adapter.AccountAdapter"

# Unique Email
ACCOUNT_UNIQUE_EMAIL = True

# AUTH settings
PASSWORD_MIN_LENGTH = 8

# Redis
REDIS_CONN_URL = env.str("REDIS_CONN_URL", default="redis://localhost:6379")
REDIS_URL = REDIS_CONN_URL

# Simple JWT
EXPIRED_TOKEN_MINUTES = env.int("EXPIRED_TOKEN_MINUTES", default=60)
EXPIRED_REFRESH_DAYS = env.int("EXPIRED_REFRESH_DAYS", default=30)

# JWT PUBLIC/PRIVATE KEY PATH
JWT_PUBLIC_KEY_PATH = env.str("JWT_PUBLIC_KEY_PATH", default="jwt_api_key.pub")
JWT_PRIVATE_KEY_PATH = env.str("JWT_PRIVATE_KEY_PATH", default="jwt_api_key")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=EXPIRED_TOKEN_MINUTES),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=EXPIRED_REFRESH_DAYS),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "RS256",
    "VERIFYING_KEY": open(JWT_PUBLIC_KEY_PATH).read(),
    "SIGNING_KEY": open(JWT_PRIVATE_KEY_PATH).read(),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}
